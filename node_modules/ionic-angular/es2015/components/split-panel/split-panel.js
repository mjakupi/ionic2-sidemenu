import { ContentChildren, Component, ElementRef, EventEmitter, forwardRef, Input, NgZone, Renderer } from '@angular/core';
import { Ion } from '../ion';
import { Config } from '../../config/config';
import { Platform } from '../../platform/platform';
import { RootNode } from '../../navigation/root-node';
const QUERY = {
    xs: '(min-width: 0px)',
    sm: '(min-width: 576px)',
    md: '(min-width: 768px)',
    lg: '(min-width: 992px)',
    xl: '(min-width: 1200px)',
    never: ''
};
/**
 * @name SplitPanel
 */
export class SplitPanel extends Ion {
    constructor(_zone, _plt, config, elementRef, renderer) {
        super(config, elementRef, renderer, 'split-panel');
        this._zone = _zone;
        this._plt = _plt;
        this._visible = false;
        this._init = false;
        this._mediaQuery = QUERY['md'];
        this.ionChange = new EventEmitter();
    }
    set _setChildren(query) {
        this.mainContent = null;
        this.sideContent = null;
        if (query.length === 1) {
            var node = query.first;
            this.setPanelCSSClass(node.getElementRef(), false);
            this.mainContent = node;
        }
        else if (query.length >= 2) {
            query.forEach(child => {
                if (child !== this) {
                    var isSide = child._isSideContent();
                    if (isSide) {
                        this.sideContent = child;
                    }
                    else {
                        this.mainContent = child;
                    }
                    this.setPanelCSSClass(child.getElementRef(), isSide);
                }
            });
            if (!this.sideContent || !this.mainContent || this.mainContent === this.sideContent) {
                console.error('split panel needs two valid roots');
            }
        }
    }
    set when(query) {
        if (typeof query === 'boolean') {
            this._mediaQuery = query;
        }
        else {
            const defaultQuery = QUERY[query];
            this._mediaQuery = (defaultQuery)
                ? defaultQuery
                : query;
        }
        this._update();
    }
    get when() {
        return this._mediaQuery;
    }
    ngAfterViewInit() {
        this._init = true;
        this._update();
    }
    _update() {
        if (!this._init) {
            return;
        }
        // Unlisten
        this._rmListerner && this._rmListerner();
        this._rmListerner = null;
        const query = this._mediaQuery;
        if (typeof query === 'boolean') {
            this.setVisible(query);
            return;
        }
        if (query && query.length > 0) {
            // Listen
            const callback = (query) => this.setVisible(query.matches);
            const mediaList = this._plt.win().matchMedia(query);
            mediaList.addListener(callback);
            this.setVisible(mediaList.matches);
            this._rmListerner = function () {
                mediaList.removeListener(callback);
            };
        }
        else {
            this.setVisible(false);
        }
    }
    setVisible(visible) {
        if (this._visible === visible) {
            return;
        }
        this.setElementClass('split-panel-visible', visible);
        this.sideContent && this.sideContent._setIsPanel(visible);
        this.mainContent && this.mainContent._setIsPanel(visible);
        this._visible = visible;
        this._zone.run(() => {
            this.ionChange.emit(this);
        });
    }
    isVisible() {
        return this._visible;
    }
    setElementClass(className, add) {
        this._renderer.setElementClass(this._elementRef.nativeElement, className, add);
    }
    setPanelCSSClass(elementRef, isSide) {
        let ele = elementRef.nativeElement;
        this._renderer.setElementClass(ele, 'split-panel-side', isSide);
        this._renderer.setElementClass(ele, 'split-panel-main', !isSide);
    }
    ngOnDestroy() {
        (void 0) /* assert */;
        this._rmListerner && this._rmListerner();
        this._rmListerner = null;
    }
    _setIsPanel(isPanel) {
        // Conforms to RootNode abstract class
    }
    _isSideContent() {
        return false;
    }
}
SplitPanel.decorators = [
    { type: Component, args: [{
                selector: 'ion-split-panel',
                template: '<ng-content></ng-content>',
                providers: [{ provide: RootNode, useExisting: forwardRef(() => SplitPanel) }]
            },] },
];
/** @nocollapse */
SplitPanel.ctorParameters = [
    { type: NgZone, },
    { type: Platform, },
    { type: Config, },
    { type: ElementRef, },
    { type: Renderer, },
];
SplitPanel.propDecorators = {
    '_setChildren': [{ type: ContentChildren, args: [RootNode, { descendants: false },] },],
    'when': [{ type: Input },],
};
//# sourceMappingURL=split-panel.js.map