var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", '@angular/core', '../ion', '../../config/config', '../../platform/platform', '../../navigation/root-node'], factory);
    }
})(function (require, exports) {
    "use strict";
    var core_1 = require('@angular/core');
    var ion_1 = require('../ion');
    var config_1 = require('../../config/config');
    var platform_1 = require('../../platform/platform');
    var root_node_1 = require('../../navigation/root-node');
    var QUERY = {
        xs: '(min-width: 0px)',
        sm: '(min-width: 576px)',
        md: '(min-width: 768px)',
        lg: '(min-width: 992px)',
        xl: '(min-width: 1200px)',
        never: ''
    };
    /**
     * @name SplitPanel
     */
    var SplitPanel = (function (_super) {
        __extends(SplitPanel, _super);
        function SplitPanel(_zone, _plt, config, elementRef, renderer) {
            _super.call(this, config, elementRef, renderer, 'split-panel');
            this._zone = _zone;
            this._plt = _plt;
            this._visible = false;
            this._init = false;
            this._mediaQuery = QUERY['md'];
            this.ionChange = new core_1.EventEmitter();
        }
        Object.defineProperty(SplitPanel.prototype, "_setChildren", {
            set: function (query) {
                var _this = this;
                this.mainContent = null;
                this.sideContent = null;
                if (query.length === 1) {
                    var node = query.first;
                    this.setPanelCSSClass(node.getElementRef(), false);
                    this.mainContent = node;
                }
                else if (query.length >= 2) {
                    query.forEach(function (child) {
                        if (child !== _this) {
                            var isSide = child._isSideContent();
                            if (isSide) {
                                _this.sideContent = child;
                            }
                            else {
                                _this.mainContent = child;
                            }
                            _this.setPanelCSSClass(child.getElementRef(), isSide);
                        }
                    });
                    if (!this.sideContent || !this.mainContent || this.mainContent === this.sideContent) {
                        console.error('split panel needs two valid roots');
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SplitPanel.prototype, "when", {
            get: function () {
                return this._mediaQuery;
            },
            set: function (query) {
                if (typeof query === 'boolean') {
                    this._mediaQuery = query;
                }
                else {
                    var defaultQuery = QUERY[query];
                    this._mediaQuery = (defaultQuery)
                        ? defaultQuery
                        : query;
                }
                this._update();
            },
            enumerable: true,
            configurable: true
        });
        SplitPanel.prototype.ngAfterViewInit = function () {
            this._init = true;
            this._update();
        };
        SplitPanel.prototype._update = function () {
            var _this = this;
            if (!this._init) {
                return;
            }
            // Unlisten
            this._rmListerner && this._rmListerner();
            this._rmListerner = null;
            var query = this._mediaQuery;
            if (typeof query === 'boolean') {
                this.setVisible(query);
                return;
            }
            if (query && query.length > 0) {
                // Listen
                var callback_1 = function (query) { return _this.setVisible(query.matches); };
                var mediaList_1 = this._plt.win().matchMedia(query);
                mediaList_1.addListener(callback_1);
                this.setVisible(mediaList_1.matches);
                this._rmListerner = function () {
                    mediaList_1.removeListener(callback_1);
                };
            }
            else {
                this.setVisible(false);
            }
        };
        SplitPanel.prototype.setVisible = function (visible) {
            var _this = this;
            if (this._visible === visible) {
                return;
            }
            this.setElementClass('split-panel-visible', visible);
            this.sideContent && this.sideContent._setIsPanel(visible);
            this.mainContent && this.mainContent._setIsPanel(visible);
            this._visible = visible;
            this._zone.run(function () {
                _this.ionChange.emit(_this);
            });
        };
        SplitPanel.prototype.isVisible = function () {
            return this._visible;
        };
        SplitPanel.prototype.setElementClass = function (className, add) {
            this._renderer.setElementClass(this._elementRef.nativeElement, className, add);
        };
        SplitPanel.prototype.setPanelCSSClass = function (elementRef, isSide) {
            var ele = elementRef.nativeElement;
            this._renderer.setElementClass(ele, 'split-panel-side', isSide);
            this._renderer.setElementClass(ele, 'split-panel-main', !isSide);
        };
        SplitPanel.prototype.ngOnDestroy = function () {
            (void 0) /* assert */;
            this._rmListerner && this._rmListerner();
            this._rmListerner = null;
        };
        SplitPanel.prototype._setIsPanel = function (isPanel) {
            // Conforms to RootNode abstract class
        };
        SplitPanel.prototype._isSideContent = function () {
            return false;
        };
        SplitPanel.decorators = [
            { type: core_1.Component, args: [{
                        selector: 'ion-split-panel',
                        template: '<ng-content></ng-content>',
                        providers: [{ provide: root_node_1.RootNode, useExisting: core_1.forwardRef(function () { return SplitPanel; }) }]
                    },] },
        ];
        /** @nocollapse */
        SplitPanel.ctorParameters = [
            { type: core_1.NgZone, },
            { type: platform_1.Platform, },
            { type: config_1.Config, },
            { type: core_1.ElementRef, },
            { type: core_1.Renderer, },
        ];
        SplitPanel.propDecorators = {
            '_setChildren': [{ type: core_1.ContentChildren, args: [root_node_1.RootNode, { descendants: false },] },],
            'when': [{ type: core_1.Input },],
        };
        return SplitPanel;
    }(ion_1.Ion));
    exports.SplitPanel = SplitPanel;
});
//# sourceMappingURL=split-panel.js.map